// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cBitsOne
int cBitsOne(NumericVector x);
RcppExport SEXP emh_cBitsOne(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cBitsOne(x));
    return rcpp_result_gen;
END_RCPP
}
// cBitsZero
int cBitsZero(NumericVector x);
RcppExport SEXP emh_cBitsZero(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cBitsZero(x));
    return rcpp_result_gen;
END_RCPP
}
// cRunsNumber
int cRunsNumber(NumericVector x);
RcppExport SEXP emh_cRunsNumber(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cRunsNumber(x));
    return rcpp_result_gen;
END_RCPP
}
// cRunsLongest
int cRunsLongest(NumericVector x);
RcppExport SEXP emh_cRunsLongest(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cRunsLongest(x));
    return rcpp_result_gen;
END_RCPP
}
// cAsLevels
NumericVector cAsLevels(NumericVector logrets);
RcppExport SEXP emh_cAsLevels(SEXP logretsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type logrets(logretsSEXP);
    rcpp_result_gen = Rcpp::wrap(cAsLevels(logrets));
    return rcpp_result_gen;
END_RCPP
}
// cAsLogReturns
NumericVector cAsLogReturns(NumericVector levels, int order);
RcppExport SEXP emh_cAsLogReturns(SEXP levelsSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cAsLogReturns(levels, order));
    return rcpp_result_gen;
END_RCPP
}
// cAsDifferences
NumericVector cAsDifferences(NumericVector x, int order);
RcppExport SEXP emh_cAsDifferences(SEXP xSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cAsDifferences(x, order));
    return rcpp_result_gen;
END_RCPP
}
// cAsLogReturnsMatrix
NumericMatrix cAsLogReturnsMatrix(NumericMatrix levels, int order);
RcppExport SEXP emh_cAsLogReturnsMatrix(SEXP levelsSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cAsLogReturnsMatrix(levels, order));
    return rcpp_result_gen;
END_RCPP
}
// cAsBinary
NumericVector cAsBinary(NumericVector rets);
RcppExport SEXP emh_cAsBinary(SEXP retsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rets(retsSEXP);
    rcpp_result_gen = Rcpp::wrap(cAsBinary(rets));
    return rcpp_result_gen;
END_RCPP
}
// cAsRollingResiduals
NumericVector cAsRollingResiduals(NumericVector rets, int w);
RcppExport SEXP emh_cAsRollingResiduals(SEXP retsSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rets(retsSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(cAsRollingResiduals(rets, w));
    return rcpp_result_gen;
END_RCPP
}
// cAsRollingTrend
NumericVector cAsRollingTrend(NumericVector rets, int w);
RcppExport SEXP emh_cAsRollingTrend(SEXP retsSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rets(retsSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(cAsRollingTrend(rets, w));
    return rcpp_result_gen;
END_RCPP
}
// cFillWeights
NumericVector cFillWeights(NumericVector preWeights, NumericVector rms);
RcppExport SEXP emh_cFillWeights(SEXP preWeightsSEXP, SEXP rmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type preWeights(preWeightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rms(rmsSEXP);
    rcpp_result_gen = Rcpp::wrap(cFillWeights(preWeights, rms));
    return rcpp_result_gen;
END_RCPP
}
// cWindow
std::list<NumericMatrix> cWindow(NumericMatrix data, int window);
RcppExport SEXP emh_cWindow(SEXP dataSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(cWindow(data, window));
    return rcpp_result_gen;
END_RCPP
}
// cMatrixSubRows
NumericMatrix cMatrixSubRows(NumericMatrix matrix, int ix, int size);
RcppExport SEXP emh_cMatrixSubRows(SEXP matrixSEXP, SEXP ixSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< int >::type ix(ixSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cMatrixSubRows(matrix, ix, size));
    return rcpp_result_gen;
END_RCPP
}
// cMatrixSubCols
NumericMatrix cMatrixSubCols(NumericMatrix matrix, int start, int end);
RcppExport SEXP emh_cMatrixSubCols(SEXP matrixSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(cMatrixSubCols(matrix, start, end));
    return rcpp_result_gen;
END_RCPP
}
// cMomentum
NumericVector cMomentum(NumericMatrix matrix);
RcppExport SEXP emh_cMomentum(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(cMomentum(matrix));
    return rcpp_result_gen;
END_RCPP
}
// cFirstLocation
int cFirstLocation(std::vector<std::string> names, std::string match);
RcppExport SEXP emh_cFirstLocation(SEXP namesSEXP, SEXP matchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type names(namesSEXP);
    Rcpp::traits::input_parameter< std::string >::type match(matchSEXP);
    rcpp_result_gen = Rcpp::wrap(cFirstLocation(names, match));
    return rcpp_result_gen;
END_RCPP
}
// cSort
std::vector<double> cSort(std::vector<double> data);
RcppExport SEXP emh_cSort(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(cSort(data));
    return rcpp_result_gen;
END_RCPP
}
// cLarge
double cLarge(std::vector<double> data, int k);
RcppExport SEXP emh_cLarge(SEXP dataSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(cLarge(data, k));
    return rcpp_result_gen;
END_RCPP
}
// cSmall
double cSmall(std::vector<double> data, int k);
RcppExport SEXP emh_cSmall(SEXP dataSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(cSmall(data, k));
    return rcpp_result_gen;
END_RCPP
}
